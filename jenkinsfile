pipeline {
    agent any
    environment {
        ENV_FILE = '.env'
    }
    stages {
        stage('Set Environment Variables') {
            steps {
                script {
                    echo "Debug: Current BRANCH_NAME = '${env.BRANCH_NAME}'"
                    def envVars = ""
                    if (env.BRANCH_NAME == 'main') {
                        echo "Setting environment for main (production) branch..."
                        envVars = """
                            MYSQL_DATABASE=${credentials('MYSQL_DATABASE_PROD')}
                            MYSQL_USER=${credentials('MYSQL_USER_PROD')}
                            MYSQL_PASSWORD=${credentials('MYSQL_PASSWORD_PROD')}
                            MYSQL_ROOT_PASSWORD=${credentials('MYSQL_ROOT_PASSWORD_PROD')}
                            MYSQL_HOST=${credentials('MYSQL_HOST_PROD')}
                            MYSQL_IN_PORT=${credentials('MYSQL_IN_PORT_PROD')}
                            MYSQL_EX_PORT=${credentials('MYSQL_EX_PORT_PROD')}

                            SPRING_PROFILE_ACTIVE=${credentials('SPRING_PROFILE_ACTIVE_PROD')}
                            SPRING_APP_PORT=${credentials('SPRING_APP_PORT_PROD')}
                        """
                    } else if (env.BRANCH_NAME == 'dev') {
                        echo "Setting environment for dev branch..."
                        envVars = """
                            MYSQL_DATABASE=${credentials('MYSQL_DATABASE_DEV')}
                            MYSQL_USER=${credentials('MYSQL_USER_DEV')}
                            MYSQL_PASSWORD=${credentials('MYSQL_PASSWORD_DEV')}
                            MYSQL_ROOT_PASSWORD=${credentials('MYSQL_ROOT_PASSWORD_DEV')}
                            MYSQL_HOST=${credentials('MYSQL_HOST_DEV')}
                            MYSQL_IN_PORT=${credentials('MYSQL_IN_PORT_DEV')}
                            MYSQL_EX_PORT=${credentials('MYSQL_EX_PORT_DEV')}

                            SPRING_PROFILE_ACTIVE=${credentials('SPRING_PROFILE_ACTIVE_DEV')}
                            SPRING_APP_PORT=${credentials('SPRING_APP_PORT_DEV')}
                        """
                    }
                    writeFile file: ENV_FILE, text: envVars
                }
            }
        }
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }
        stage('Grant Permissions') {
            steps {
                sh 'chmod +x ./gradlew'
            }
        }
        stage('Build JAR') {
            steps {
                sh "./gradlew clean build"
            }
        }
        stage('Run Tests') {
            steps {
                script {
                    echo "Running tests..."
                    sh "./gradlew test"
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    def imageTag = env.BRANCH_NAME ? env.BRANCH_NAME : "latest"
                    def dockerImage = docker.build("myapp:${imageTag}")
                }
            }
        }
        stage('Deploy to Dev (Only for dev branch)') {
            when {
                branch 'dev'
            }
            steps {
                script {
                    echo "Deploying to development server for testing..."
                    sh '''
                    docker compose down || true
                    docker compose build --no-cache
                    docker compose up -d --env-file .env
                    '''
                }
            }
        }
        stage('Deploy to Production (Only for main branch)') {
            when {
                branch 'main'
            }
            steps {
                script {
                    echo "Stopping old container..."
                    sh '''
                    docker stop myapp || true
                    docker rm myapp || true
                    '''

                    echo "Running new container..."
                    sh '''
                    docker compose down || true
                    docker compose build --no-cache
                    docker compose up -d --env-file .env
                    '''
                }
            }
        }
        stage('Cleanup') {
            steps {
                script {
                    sh "docker image prune -f"
                }
            }
        }
    }
    post {
        always {
            echo "Cleaning up resources"
        }
        success {
            echo "Pipeline completed successfully."
        }
        failure {
            echo "Pipeline failed. Check the logs."
            error("Pipeline failed! Fix the issue before merging to main.")
        }
    }
}