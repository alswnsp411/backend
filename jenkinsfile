pipeline {
    agent any
    environment {
        ENV_FILE = ''
    }
    stages {
        stage('Set Environment Variables') {
            steps {
                script {
                     if (env.BRANCH_NAME == 'main') {
                          echo "Setting environment for main branch..."
                          writeFile file: ENV_FILE_PATH, text: """
                            MYSQL_DATABASE=${env.MYSQL_DATABASE_PROD}
                            MYSQL_USER=${env.MYSQL_USER_PROD}
                            MYSQL_PASSWORD=${env.MYSQL_PASSWORD_PROD}
                            MYSQL_ROOT_PASSWORD=${env.MYSQL_ROOT_PASSWORD_PROD}
                            MYSQL_HOST=${env.MYSQL_HOST_PROD}
                            MYSQL_IN_PORT=${env.MYSQL_IN_PORT_PROD}
                            MYSQL_EX_PORT=${env.MYSQL_EX_PORT_PROD}

                            SPRING_PROFILE_ACTIVE=${env.SPRING_PROFILE_ACTIVE_PROD}
                            SPRING_APP_PORT=${env.SPRING_APP_PORT_PROD}
                            """
                     } else if (env.BRANCH_NAME == 'dev') {
                          echo "Setting environment for dev branch..."
                          writeFile file: ENV_FILE_PATH, text: """
                            MYSQL_DATABASE=${env.MYSQL_DATABASE_DEV}
                            MYSQL_USER=${env.MYSQL_USER_DEV}
                            MYSQL_PASSWORD=${env.MYSQL_PASSWORD_DEV}
                            MYSQL_ROOT_PASSWORD=${env.MYSQL_ROOT_PASSWORD_DEV}
                            MYSQL_HOST=${env.MYSQL_HOST_DEV}
                            MYSQL_IN_PORT=${env.MYSQL_IN_PORT_DEV}
                            MYSQL_EX_PORT=${env.MYSQL_EX_PORT_DEV}

                            SPRING_PROFILE_ACTIVE=${env.SPRING_PROFILE_ACTIVE_DEV}
                            SPRING_APP_PORT=${env.SPRING_APP_PORT_DEV}
                            """
                        }
                }
            }
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }
        stage('Build and Test') {
            steps {
                echo "Building and testing for branch: ${env.BRANCH_NAME}"
                sh '''
                docker-compose --env-file $ENV_FILE down || true
                docker-compose --env-file $ENV_FILE up --build -d
                docker-compose --env-file $ENV_FILE exec spring-app ./gradlew test
                docker-compose --env-file $ENV_FILE down
                '''
            }
        }
        stage('Deploy (Dev)') {
            when {
                branch 'dev'
            }
            steps {
                echo "Deploying development environment on host PC..."
                sh '''
                docker-compose --env-file $ENV_FILE down || true
                docker-compose --env-file $ENV_FILE up --build -d
                '''
            }
        }
        stage('Deploy (Main)') {
            when {
                branch 'main'
            }
            steps {
                echo "Main branch detected. Deployment to AWS will be implemented later."
            }
        }
        }
    post {
        always {
            echo "Cleaning up resources"
            sh 'docker-compose --env-file $ENV_FILE down || true'
        }
        success {
            echo "Pipeline completed successfully."
        }
        failure {
            echo "Pipeline failed. Check the logs."
        }
    }
    }
}